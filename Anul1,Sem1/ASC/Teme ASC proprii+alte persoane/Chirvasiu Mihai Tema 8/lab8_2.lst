     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fprintf, fopen, fclose, scanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 <res 00000064>              a resb 100
    20 00000064 20000000                    b dd 32
    21 00000068 257300                      citire_a db "%s", 0
    22 0000006B 6E756D6572652E7478-         fisier db "numere.txt", 0
    22 00000074 7400               
    23 00000076 7700                        acces db "w", 0 
    24 00000078 FFFFFFFF                    descriptor dd -1 
    25 0000007C 496E74726F64756365-         mesaj db "Introduceti numerele care sa se scrie in fisier ", 0
    25 00000085 7469206E756D657265-
    25 0000008E 6C6520636172652073-
    25 00000097 612073652073637269-
    25 000000A0 6520696E2066697369-
    25 000000A9 65722000           
    26                                  
    27                                  ; 12. Se da un nume de fisier (definit in segmentul de date). Sa se creeze un fisier cu numele dat, apoi sa se citeasca de la tastatura numere si sa se scrie valorile citite in fisier pana cand se citeste de la tast
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 68[7C000000]                    push dword mesaj        ; afisam mesajul pentru utilizator 
    32 00000005 68[68000000]                    push dword citire_a 
    33 0000000A FF15[00000000]                  call [printf] 
    34 00000010 83C408                          add esp, 4*2
    35                                          
    36 00000013 68[76000000]                    push dword acces        ; deschidem fisierul 
    37 00000018 68[6B000000]                    push dword fisier 
    38 0000001D FF15[00000000]                  call [fopen]
    39 00000023 83C408                          add esp, 4*2 
    40                                          
    41 00000026 A3[78000000]                    mov [descriptor], eax 
    42 0000002B 83F800                          cmp eax, 0
    43 0000002E 7448                            je final 
    44                                          
    45                                          repeta:
    46                                          
    47 00000030 68[00000000]                    push dword a        ; se citeste de la tastatura numarul curent
    48 00000035 68[68000000]                    push dword citire_a
    49 0000003A FF15[00000000]                  call [scanf] 
    50 00000040 83C408                          add esp, 4*2
    51                                          
    52 00000043 8B1D[00000000]                  mov ebx, [a]        ; se compara daca numarul este 0 
    53 00000049 80FB30                          cmp bl, 48
    54 0000004C 742A                            je final 
    55                                          
    56 0000004E 68[00000000]                    push dword a            ; se scriu in fisier numerele citite
    57 00000053 FF35[78000000]                  push dword [descriptor]
    58 00000059 FF15[00000000]                  call [fprintf]
    59 0000005F 83C408                          add esp, 4*2 
    60                                          
    61 00000062 68[64000000]                    push dword b            ; se adauga spatiu dupa fiecare numar citit 
    62 00000067 FF35[78000000]                  push dword [descriptor] 
    63 0000006D FF15[00000000]                  call [fprintf] 
    64 00000073 83C408                          add esp, 4*2
    65                                          
    66 00000076 EBB8                            jmp repeta
    67                                          
    68                                      final:
    69                                          
    70 00000078 FF35[78000000]                  push dword [descriptor]     ; se inchide fisierul dupa ce se citeste 0 
    71 0000007E FF15[00000000]                  call [fclose] 
    72 00000084 83C404                          add esp, 4 
    73                                          
    74                                          ; exit(0)
    75 00000087 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000089 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
