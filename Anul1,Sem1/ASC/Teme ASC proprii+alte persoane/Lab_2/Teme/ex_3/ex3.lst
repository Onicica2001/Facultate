     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0500                        a dw 5
    14 00000002 0500                        b dw 5
    15 00000004 6400                        c dw 100 
    16 00000006 2D00                        d dw 45
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;calculati (a+b+b)+(c-d)
    22                                      
    23 00000000 66A1[00000000]                  mov AX , [a] ; AX = a = 5 
    24 00000006 660305[02000000]                add AX , [b] ; AX = AX + b = a + b = 5 + 5 = 10
    25 0000000D 660305[02000000]                add AX , [b] ; AX = AX + b = (a + b + b) = 10 + 5 = 15
    26 00000014 668B1D[04000000]                mov BX , [c] ; BX = c = 100 
    27 0000001B 662B1D[06000000]                sub BX , [d] ; BX = (c - d) = 100 - 45 = 55 
    28 00000022 6601D8                          add AX , BX ; AX = AX + BX = (a + b + b) + (c -d) = 15 + 55 = 70
    29                                         
    30 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    31 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
