     1                                  bits 32 
     2                                  
     3                                  global start        
     4                                  
     5                                  
     6                                  extern exit               
     7                                  import exit msvcrt.dll    
     8                                                            
     9                                  ; a - byte, b - word, c - double word, d - qword - Interpretare fara semn
    10                                  segment data use32 class=data
    11 00000000 FF                          a db 0FFh
    12 00000001 AA00                        b dw 0AAh
    13 00000003 BAEDFEFF                    c dd 0FFFEEDBAh
    14 00000007 AAAAEEEE00000000            d dq 0EEEEAAAAh
    15                                  
    16                                  ; (a-b)+(c-b-d)+d
    17                                  segment code use32 class=code
    18                                      start:
    19                                          ;calculam c-b
    20 00000000 66A1[03000000]                  mov ax,word[c]      ;AX=EDBAh
    21 00000006 668B15[05000000]                mov dx,word[c+2]    ;DX=FFFEh
    22 0000000D 668B1D[01000000]                mov bx,word[b]      ;BX=AAh
    23 00000014 66B90000                        mov cx,0            
    24 00000018 6629D8                          sub ax,bx           ;AX=AX-BX=EDBAh-AAh=ED10h
    25 0000001B 6619CA                          sbb dx,cx           ;DX=DX-CX-CF=FFFEh-0-0=FFFEh                    CF=0
    26 0000001E 6650                            push ax
    27 00000020 6652                            push dx
    28 00000022 58                              pop eax             ;EAX=FFFEED10h
    29                                          
    30                                          ;calculam c-b-d
    31 00000023 BA00000000                      mov edx,0           
    32 00000028 8B1D[07000000]                  mov ebx,dword[d]    ;EBX=EEEEAAAAh
    33 0000002E 8B0D[0B000000]                  mov ecx,dword[d+4]  ;ECX=0
    34 00000034 29D8                            sub eax,ebx         ;EAX=EAX-EBX=FFFEED10h-EEEEAAAAh=11104266h      CF=0
    35 00000036 19CA                            sbb edx,ecx         ;EDX=EDX-ECX-CF=0-0-0=0
    36                                          
    37                                          ;calculam (c-b-d)+d
    38 00000038 8B1D[07000000]                  mov ebx,dword[d]    ;EBX=EEEEAAAAh
    39 0000003E 8B0D[0B000000]                  mov ecx,dword[d+4]  ;ECX=0
    40 00000044 01D8                            add eax,ebx         ;EAX=EAX+EBX=FFFEED10h+EEEEAAAAh=EEED97BAh      CF=1
    41 00000046 11CA                            adc edx,ecx         ;EDX=EDX+ECX+CF=0+0+1=1
    42                                          
    43                                          ;calculam a-b
    44 00000048 8A1D[00000000]                  mov bl,[a]          ;BL=a=FFh
    45 0000004E B700                            mov bh,0            
    46 00000050 668B0D[01000000]                mov cx,[b]          ;CX=b=AAh
    47 00000057 6629CB                          sub bx,cx           ;BX=BX-CX=FFh-AAh=55h
    48 0000005A 66B90000                        mov cx,0
    49 0000005E 6653                            push bx
    50 00000060 6651                            push cx
    51 00000062 5B                              pop ebx             ;EBX=55h
    52 00000063 B900000000                      mov ecx,0
    53                                          
    54                                          ;calculam (a-b)+(c-b-d)+d
    55 00000068 01D8                            add eax,ebx         ;EAX=EAX+EBX=11104266h+55h=111042BBh            CF=0
    56 0000006A 11CA                            adc edx,ecx         ;EDX=EDX+ECX+CF=1+0+0=1
    57                                          
    58                                          ; exit(0)
    59 0000006C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 0000006E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
