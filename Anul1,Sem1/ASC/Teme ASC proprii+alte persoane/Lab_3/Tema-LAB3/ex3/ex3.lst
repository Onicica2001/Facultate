     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; a,b,c-byte; d-doubleword; e-qword
    12                                  segment data use32 class=data
    13 00000000 03                          a db 3
    14 00000001 04                          b db 4
    15 00000002 02                          c db 2 
    16 00000003 14000000                    d dd 20
    17 00000007 3200000000000000            e dq 50
    18                                  
    19                                  ; 2. 2/(a+b*c-9)+e-d in interpretarea fara semn
    20                                  segment code use32 class=code
    21                                      start:
    22                                          
    23                                          ;calculez (b*c)
    24                                          
    25 00000000 A0[01000000]                    mov al , [b]
    26 00000005 F625[02000000]                  mul byte [c]
    27                                          ;ax = ax * c = (b*c)
    28                                          
    29 0000000B 8A1D[00000000]                  mov bl , [a]
    30                                          
    31                                          ;convertesc interpretarea fara semn byte-ul bl la bx 
    32 00000011 B700                            mov bh , 0 ; bx = a 
    33                                          
    34                                          ;calculez (a+b*c)
    35 00000013 6601C3                          add bx , ax ; bx = bx + ax = (a+b*c)
    36                                          
    37                                          ;calculez (a+b*c-9)
    38 00000016 6683EB09                        sub bx , 9 ; bx = bx - 9 = (a+b*c-9)
    39                                          
    40 0000001A 66B80200                        mov ax , 2 ; ax = 2 
    41                                          
    42                                          ;convertesc in interpretarea fara semn word-ul ax la dx:ax pentru a putea efectua impartirea cu bx 
    43 0000001E 66BA0000                        mov dx , 0 ; dx:ax = 2 
    44                                          
    45                                          ;calculez 2/(a+b*c-9)
    46 00000022 66F7F3                          div bx ; dx:ax / bx = ax si dx:ax % bx = dx (catul impartirii va fi retinut in ax , respectiv restul in dx)
    47                                          ;ax = 2/(a+b*c-9)
    48                                          
    49                                          ;convertesc in interpretarea fara semn word-ul ax la dx:ax
    50 00000025 66BA0000                        mov dx , 0 ; dx:ax = 2/(a+b*c-9)
    51                                          
    52 00000029 6652                            push dx 
    53 0000002B 6650                            push ax 
    54 0000002D 58                              pop eax 
    55                                          ;eax = dx:ax = 2/(a+b*c-9)
    56                                          
    57                                          ;convertesc in interpretarea fara semn dword-ul eax la edx:eax
    58 0000002E BA00000000                      mov edx , 0 ; edx:eax = 2/(a+b*c-9)
    59                                          
    60 00000033 8B1D[07000000]                  mov ebx , dword [e+0]
    61 00000039 8B0D[0B000000]                  mov ecx , dword [e+4]
    62                                          ;ecx:ebx = e 
    63                                          
    64                                          ;calculez 2/(a+b*c-9)+e
    65                                          
    66 0000003F 01D8                            add eax , ebx 
    67 00000041 11CA                            adc edx , ecx 
    68                                          ; edx:eax = 2/(a+b*c-9)+e
    69                                          
    70 00000043 8B1D[03000000]                  mov ebx , [d]
    71                                          
    72                                          ;convertesc in interpretarea fara semn dword-ul ebx la ecx:ebx
    73 00000049 B900000000                      mov ecx , 0 ; ecx:ebx = d 
    74                                          
    75                                          ;calculez 2/(a+b*c-9)+e-d
    76 0000004E 29D8                            sub eax , ebx 
    77 00000050 19CA                            sbb edx , ecx 
    78                                          ; edx:eax = 2/(a+b*c-9)+e-d
    79                                   
    80                                   
    81 00000052 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    82 00000054 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
