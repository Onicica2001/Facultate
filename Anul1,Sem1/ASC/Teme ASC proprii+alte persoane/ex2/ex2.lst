     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern fopen , fclose , fread , printf 
     8                                  extern exit               
     9                                  import exit msvcrt.dll    
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import fread msvcrt.dll               
    13                                  import printf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 6263646667686A6B6C-         consoane db "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"
    17 00000009 6D6E70717273747677-
    17 00000012 78797A424344464748-
    17 0000001B 4A4B4C4D4E50515253-
    17 00000024 54565758595A       
    18                                      len_consoane equ $-consoane
    19 0000002A 696E7075742E747874-         nume_fisier db "input.txt" , 0
    19 00000033 00                 
    20 00000034 7200                        mod_acces db "r" , 0 
    21 00000036 00000000                    descriptor dd 0 
    22                                      len equ 100 
    23 0000003A <res 00000064>              citite resb len 
    24 0000009E 00000000                    caract_citite dd 0 
    25 000000A2 00000000                    copie_ecx dd 0 
    26 000000A6 00000000                    rezultat dd 0 
    27 000000AA 4E756D6172756C2063-         mesaj_rezultat dd "Numarul consoanelor din sirul citit este: %d" , 0 
    27 000000B3 6F6E736F616E656C6F-
    27 000000BC 722064696E20736972-
    27 000000C5 756C20636974697420-
    27 000000CE 657374653A20256400-
    27 000000D7 000000             
    28                                  
    29                                  ; 2. Se da un fisier text. Sa se citeasca continutul fisierului, sa se contorizeze numarul de consoane si sa se afiseze aceasta valoare. Numele fisierului text este definit in segmentul de date.
    30                                  segment code use32 class=code
    31                                      start:
    32                                          
    33 00000000 68[34000000]                    push dword mod_acces
    34 00000005 68[2A000000]                    push dword nume_fisier
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp , 4*2 ; se deschide fisierul "input.txt" din directorul proiectului pentru a se realiza citirea caracterelor
    37                                          
    38 00000013 83F800                          cmp eax , 0 ; se compara descriptorul de fisier cu 0 si daca sunt egale se sare la final-fisierul nu a fost deschis cu succes
    39 00000016 7474                            je final_desinvalid
    40                                          
    41 00000018 A3[36000000]                    mov [descriptor] , eax ; se salveaza descriptorul fisierului daca este valid intr-o variabila pentru a putea citi 
    42 0000001D 31D2                            xor edx , edx  ; in edx o sa salvam rezultatul final al problemei - nr de consoane 
    43                                          
    44                                          citire:
    45                                          
    46 0000001F 0115[A6000000]                  add [rezultat] , edx ; se adauga la rezultat nr consonelor din loop-ul anterior
    47 00000025 31D2                            xor edx , edx 
    48                                          
    49 00000027 FF35[36000000]                  push dword [descriptor]
    50 0000002D 6A64                            push dword len 
    51 0000002F 6A01                            push dword 1 
    52 00000031 68[3A000000]                    push dword citite 
    53 00000036 FF15[00000000]                  call [fread]
    54 0000003C 83C410                          add esp , 4*4 ; se realizeaza citirea primelor 100 de caractere din fisier si se salveaza in sirul "citite"
    55                                          
    56 0000003F 83F800                          cmp eax , 0 
    57 00000042 7439                            je final_citire ; cum in eax se salveaza nr de caractere citite , o sa iesim din loop cand valoarea acestuia este 0 - adica am citit toate caracterele
    58                                          
    59 00000044 A3[9E000000]                    mov [caract_citite] , eax ; se salveaza numarul caracterelor citite in dword-ul caract_citite
    60 00000049 BE[3A000000]                    mov esi , citite ; se realizeaza o parcurgere caracter cu caracter a sirului citit 
    61                                          
    62 0000004E 8B0D[9E000000]                  mov ecx , [caract_citite] ; se pregateste primul loop 
    63                                          
    64                                          parcurgere_citite:
    65                                          
    66 00000054 AC                              lodsb ; se ia urmatorul caracter din sirul citit 
    67 00000055 890D[A2000000]                  mov [copie_ecx] , ecx ; se salveaza valoarea lui ecx pentru primul loop
    68                                          
    69 0000005B B900000000                      mov ecx , 0 
    70                                          
    71                                              parcurgere: ; loop cu nr necunoscut de pasi care verifica daca caracterul actual din sir este o consoana 
    72 00000060 8A99[00000000]                          mov bl , [consoane+ecx] ; se ia urmatorul caracter din "consoane" daca mai exista 
    73 00000066 38D8                                    cmp al , bl ; se compara caracterul din sirul curent cu urmatoarea consoana 
    74 00000068 7408                                    je consoana_valid ; se sare afara din parcurgere daca am gasit egalitate 
    75                                                  
    76 0000006A 41                                      inc ecx ; se continua cu parcurgerea sirului de consoane 
    77 0000006B 83F92A                                  cmp ecx , len_consoane ; se compara contorul curent cu lungimea sirului consoane 
    78 0000006E 7703                                    ja consoana_invalid ; daca ecx > len_consoane inseamna ca,caracterul curent nu este consoana 
    79 00000070 76EE                                    jbe parcurgere ; se continua parcurgerea daca inca nu am parcurs tot sirul de consoane 
    80                                          
    81                                          consoana_valid:
    82 00000072 42                                  inc edx ; se incrementeaza edx daca am gasit o consoana 
    83                                             
    84                                          consoana_invalid:
    85 00000073 8B0D[A2000000]                      mov ecx , [copie_ecx] ; se revine la valoarea lui ecx de dinaintea loop-ului parcurgere
    86                                              
    87 00000079 E2D9                            loop parcurgere_citite
    88                                       
    89 0000007B EBA2                            jmp citire ; se continua citirea din fisier  
    90                                          
    91                                          final_citire: ; eticheta unde se sare daca nu mai sunt caractere de citit 
    92 0000007D FF35[36000000]                  push dword [descriptor]
    93 00000083 FF15[00000000]                  call [fclose]
    94 00000089 83C404                          add esp , 4 ; se inchide fisierul cu ajutorul descriptorului daca am citit toate caracterele
    95                                          
    96                                          final_desinvalid:
    97                                          
    98 0000008C FF35[A6000000]                  push dword [rezultat]
    99 00000092 68[AA000000]                    push dword mesaj_rezultat
   100 00000097 FF15[00000000]                  call [printf]
   101 0000009D 83C408                          add esp , 4*2 ; se afiseaza rezultatul problemei in consola - numarul consoanelor din sirul citit 
   102                                       
   103 000000A0 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   104 000000A2 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
