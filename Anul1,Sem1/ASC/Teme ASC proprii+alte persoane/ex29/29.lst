     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit
     8                                  extern printf 
     9                                  extern scanf              ; tell nasm that exit exists even if we won't be defining it
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import printf msvcrt.dll   
    12                                  import scanf msvcrt.dll          ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 00000000                    backup dd 0 
    17 00000004 0000                        rezultat dw 0 
    18 00000006 00000000                    a dd 0
    19 0000000A 00000000                    m dd 0 
    20 0000000E 00000000                    n dd 0 
    21 00000012 6E3D00                      message db "n=" , 0
    22 00000015 56616C6F6172656120-         format_mesaj_a db "Valoarea pentru a este:" , 0
    22 0000001E 70656E747275206120-
    22 00000027 657374653A00       
    23 0000002D 56616C6F6172656120-         format_mesaj_m  db "Valoarea pentru m este:" , 0
    23 00000036 70656E747275206D20-
    23 0000003F 657374653A00       
    24 00000045 56616C6F6172656120-         format_mesaj_n db "Valoarea pentru n este:" , 0 
    24 0000004E 70656E747275206E20-
    24 00000057 657374653A00       
    25 0000005D 56616C6F72696C6520-         format_afisare db "Valorile citite sunt: a = %d , m = %d , n = %d" , 0 
    25 00000066 636974697465207375-
    25 0000006F 6E743A2061203D2025-
    25 00000078 64202C206D203D2025-
    25 00000081 64202C206E203D2025-
    25 0000008A 6400               
    26 0000008C 52657A756C74617475-         format_rezultat db "Rezultatul problemei este : %d" , 0 
    26 00000095 6C2070726F626C656D-
    26 0000009E 65692065737465203A-
    26 000000A7 20256400           
    27 000000AB 256400                      format db "%d" , 0 
    28                                      
    29                                  ; 29 . Se citesc de la tastatura trei numere a, m si n (a: word, 0 <= m, n <= 15, m > n). Sa se izoleze bitii de la m-n ai lui a si sa se afiseze numarul intreg reprezentat de acesti bitii in baza 10.
    30                                  segment code use32 class=code
    31                                      start:
    32                                      
    33 00000000 68[15000000]                    push dword format_mesaj_a
    34 00000005 FF15[00000000]                  call [printf]
    35 0000000B 83C404                          add esp , 4 
    36                                          
    37 0000000E 68[06000000]                    push dword a
    38 00000013 68[AB000000]                    push dword format 
    39 00000018 FF15[00000000]                  call [scanf]
    40 0000001E 83C408                          add esp , 4*2
    41                                          
    42 00000021 68[2D000000]                    push dword format_mesaj_m
    43 00000026 FF15[00000000]                  call [printf]
    44 0000002C 83C404                          add esp , 4 
    45                                          
    46 0000002F 68[0A000000]                    push dword m 
    47 00000034 68[AB000000]                    push dword format
    48 00000039 FF15[00000000]                  call [scanf]
    49 0000003F 83C408                          add esp , 4*2
    50                                          
    51 00000042 68[45000000]                    push dword format_mesaj_n
    52 00000047 FF15[00000000]                  call [printf]
    53 0000004D 83C404                          add esp , 4 
    54                                          
    55 00000050 68[0E000000]                    push dword n 
    56 00000055 68[AB000000]                    push dword format 
    57 0000005A FF15[00000000]                  call [scanf]
    58 00000060 83C408                          add esp , 4*2 
    59                                          
    60 00000063 FF35[0E000000]                  push dword [n]
    61 00000069 FF35[0A000000]                  push dword [m] 
    62 0000006F FF35[06000000]                  push dword [a]
    63 00000075 68[5D000000]                    push dword format_afisare
    64 0000007A FF15[00000000]                  call [printf]
    65 00000080 83C410                          add esp , 4*4
    66                                          
    67 00000083 6631D2                          xor dx , dx 
    68 00000086 66BB0200                        mov bx , 2   
    69 0000008A 8B0D[0A000000]                  mov ecx , [m]
    70 00000090 2B0D[0E000000]                  sub ecx , [n]
    71 00000096 83C101                          add ecx , 1 
    72                                          
    73                                          adunare_puteri:
    74                                          
    75 00000099 66B80100                        mov ax , 1 
    76 0000009D 890D[00000000]                  mov [backup] , ecx 
    77 000000A3 8B0D[0E000000]                  mov ecx , [n]
    78                                          
    79 000000A9 41                              inc ecx 
    80 000000AA 890D[0E000000]                  mov [n] , ecx 
    81 000000B0 49                              dec ecx 
    82                                          
    83 000000B1 83F900                          cmp ecx , 0
    84 000000B4 7405                            je putere_zero
    85                                          
    86                                          ridicare_putere:
    87                                          
    88 000000B6 66F7E3                          mul bx
    89                                         
    90 000000B9 E2FB                            loop ridicare_putere
    91                                          
    92                                          putere_zero:
    93                                          
    94 000000BB 660105[04000000]                add [rezultat] , ax 
    95 000000C2 8B0D[00000000]                  mov ecx , [backup]       
    96                                          
    97 000000C8 E2CF                            loop adunare_puteri
    98                                          
    99 000000CA 66A1[06000000]                  mov ax , word[a]
   100 000000D0 668B1D[04000000]                mov bx , [rezultat]
   101 000000D7 6621D8                          and ax , bx 
   102                                          
   103 000000DA 6689C3                          mov bx , ax 
   104 000000DD 31C0                            xor eax , eax 
   105 000000DF 6689D8                          mov ax , bx ; se realizeaza conversie fara semn de la ax la eax , in cazul conversiei cu semn trebuie: cwde
   106                                          
   107 000000E2 50                              push eax 
   108 000000E3 68[8C000000]                    push format_rezultat
   109 000000E8 FF15[00000000]                  call [printf]
   110 000000EE 83C408                          add esp , 4*2
   111                                          
   112                                          
   113 000000F1 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   114 000000F3 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
